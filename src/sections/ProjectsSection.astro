---
import SectionLayout from "@/layouts/SectionLayout.astro";
import SectionTitle from "@/components/ui/SectionTitle.astro";
import ProjectCardSwiper from "@/components/ProjectCardSwiper.astro";
import Button from "@/components/ui/Button.astro";
import GridCardsLayout from "@/components/GridCardsLayout.astro";

const { t, lang } = Astro.props;
---

<SectionLayout
  id="projects"
  color="secondary"
  className="flex flex-col gap-8 sm:gap-10"
  border={false}
>
  <SectionTitle text={t.title} color="primary" />
  <p class="font-secondary text-sm xs:text-base sm:text-md md:text-lg">
    {t.description}
  </p>

  <GridCardsLayout projects={t.projects} categories={t.categories} {lang} isHome={true}/>

  <div class="block md:hidden" data-swiper-container>
    <div class="swiper mySwiper pb-12">
      <div id="swiper-cards" class="swiper-wrapper">
        {
          t.projects.map((project, index) => (
            <ProjectCardSwiper {project} {lang} categories={t.categories} />
          ))
        }
      </div>

      <!-- Barra de progreso -->
      <div class="swiper-pagination"></div>
    </div>
  </div>

  <div class="md:m-auto">
    <Button
      as="a"
      href={`/${lang}/projects/`}
      text={t.ctaAllProjects}
      fill={false}
      color="primary"
      arrow={true}
    />
  </div>
</SectionLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const swiperContainer = document.querySelector("[data-swiper-container]");
    
    if (!swiperContainer) return;

    let swiperLoaded = false;

    function normalizeSlideHeights() {
      const slides = document.querySelectorAll(".mySwiper .swiper-slide");
      let maxHeight = 0;

      slides.forEach((slide) => {
        (slide as HTMLElement).style.height = "auto";
        maxHeight = Math.max(maxHeight, (slide as HTMLElement).offsetHeight);
      });

      slides.forEach((slide) => {
        (slide as HTMLElement).style.height = `${maxHeight}px`;
      });
    }

    async function loadSwiper() {
      if (swiperLoaded) return;
      swiperLoaded = true;

      if (!document.getElementById("swiper-css")) {
        const link = document.createElement("link");
        link.id = "swiper-css";
        link.rel = "stylesheet";
        link.href = "https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css";
        document.head.appendChild(link);

        const style = document.createElement("style");
        style.id = "swiper-custom-styles";
        style.textContent = `
          .swiper {
            padding-bottom: 3rem;
          }
          .swiper-slide {
            display: flex;
            justify-content: center;
            align-items: stretch;
          }
          .swiper-slide > div {
            flex: 1 !important;
          }
          .swiper-pagination {
            position: absolute;
            bottom: 0;
            left: 50% !important;
            top: unset !important;
            transform: translateX(-50%);
            width: 90% !important;
            height: 6px;
            background-color: #D2DCED;
            border-radius: 30px;
            overflow: hidden;
          }
          .swiper-pagination-progressbar-fill {
            background: #234C91 !important;
            border-radius: 30px;
          }
        `;
        document.head.appendChild(style);
      }

      const { default: Swiper } = await import("swiper");
      const { Pagination } = await import("swiper/modules");

      new Swiper(".mySwiper", {
        modules: [Pagination],
        slidesPerView: 1,
        spaceBetween: 16,
        freeMode: true,
        grabCursor: true,
        mousewheel: true,
        keyboard: {
          enabled: true,
        },
        pagination: {
          el: ".swiper-pagination",
          type: "progressbar",
        },
        breakpoints: {
          320: { slidesPerView: 1.3 },
          480: { slidesPerView: 1.5 },
          640: { slidesPerView: 2 },
        },
        on: {
          init: normalizeSlideHeights,
          resize: normalizeSlideHeights,
          update: normalizeSlideHeights,
        },
      });
    }

    if (window.matchMedia("(max-width: 767px)").matches) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              loadSwiper();
              observer.disconnect();
            }
          });
        },
        {
          rootMargin: "400px",
          threshold: 0,
        }
      );

      observer.observe(swiperContainer);
    }

    window.addEventListener("resize", () => {
      if (window.matchMedia("(max-width: 767px)").matches && !swiperLoaded) {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                loadSwiper();
                observer.disconnect();
              }
            });
          },
          {
            rootMargin: "400px",
            threshold: 0.1,
          }
        );

        observer.observe(swiperContainer);
      }
    });
  });
</script>