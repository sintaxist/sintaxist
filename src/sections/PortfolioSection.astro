---
import PortfolioCard from "@/components/PortfolioCard.astro";
import PortfolioModal from "@/components/PortfolioModal.astro";
import Button from "@/components/ui/Button.astro";
import {
  getFirstInvitaciones,
  getMoreInvitaciones,
} from "@/data/invitaciones";
import * as Icons from "@/components/ui/Icons.ts";

const invitaciones = getFirstInvitaciones();
const moreInvitaciones = getMoreInvitaciones();
const showMoreButton = moreInvitaciones.length > 0;

const bannerCanvasId = `banner-canvas-${crypto.randomUUID()}`;
---

<!-- Preconnect para acelerar Cloudinary -->
<link rel="preconnect" href="https://res.cloudinary.com" crossorigin />

<section id="demos" class="py-20 lg:py-32 px-6 relative overflow-x-hidden">
  <div class="absolute inset-0">
    <div
      class="absolute bottom-10 left-1/4 w-96 h-96 rounded-full opacity-10 bg-teal-500 blur-3xl"
    >
    </div>
    <div
      class="absolute top-10 right-1/3 w-80 h-80 rounded-full opacity-10 bg-sky-500 blur-3xl"
    >
    </div>
  </div>
  <div class="max-w-7xl mx-auto relative z-10">
    <!-- Headline -->
    <div class="md:text-center mb-10 md:mb-20">
      <h2 class="  font-bold text-4xl lg:text-6xl text-gray-900 mb-6">
        Invitaciones que <span class="text-indigo-600">Inspiran</span>
      </h2>
      <p
        class="  font-normal text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed"
      >
        Creamos experiencias únicas para bodas, eventos corporativos y
        celebraciones especiales. No usamos plantillas: cada invitación es
        diseñada y programada a la medida.
      </p>
    </div>

    <!-- Grid de proyectos -->
    <ul
      id="portfolio-grid"
      class="hidden md:grid grid-cols-1 xs:grid-cols-2 lg:grid-cols-4 gap-6"
    >
      {
        invitaciones.map((invitacion, index) => (
          <PortfolioCard project={invitacion} index={index} />
        ))
      }
    </ul>

    <!-- Botón mostrar más -->
    {
      showMoreButton && (
        <div
          id="show-more-container"
          class="hidden md:block text-center m-auto mt-16"
        >
          <Button
            id="show-more-btn"
            variant="secondary"
            size="lg"
            className="xs:min-w-[280px] h-[56px]"
          >
            <span class="btn-text">Mostrar Más Proyectos</span>
            <div class="btn-loader hidden">
              <>
                <span class="dot" />
                <span class="dot" />
                <span class="dot" />
              </>
            </div>
          </Button>
        </div>
      )
    }

    <div class="block md:hidden">
      <div class="swiper mySwiper pb-12">
        <div id="swiper-cards" class="swiper-wrapper">
          {
            invitaciones.map((invitacion, index) => (
              <ul class="swiper-slide flex">
                <PortfolioCard project={invitacion} index={index} />
              </ul>
            ))
          }

          {
            showMoreButton && (
              <div
                id="showMoreBtnMobile"
                class="swiper-slide relative rounded-2xl bg-indigo-200 backdrop-blur-xl border border-white/30 hover:border-indigo-200 hover:bg-indigo-100 transition-all duration-300 shadow-lg hover:shadow-xl w-full flex flex-col cursor-pointer"
              >
                <span class="container-svg flex items-center justify-center">
                  <Fragment set:html={Icons.moreProjects} />
                </span>
                <span class="text-xl font-bold max-w-[60%] text-center">
                  Mostrar más proyectos
                </span>
              </div>
            )
          }
        </div>

        <!-- Barra de progreso -->
        <div class="swiper-pagination"></div>
      </div>
    </div>

    <!-- <div class="mt-12">
      <div
        class="relative rounded-2xl p-6 flex items-center gap-x-4 max-w-3xl mx-auto overflow-hidden"
      >
        <canvas
          id={bannerCanvasId}
          class="gradient-canvas absolute inset-0 w-full h-full"
          style="--gradient-color-1:#001488; --gradient-color-2:#4F39F6; --gradient-color-3:#5328ff;"
        ></canvas>

        <div class="relative z-10 flex items-start gap-x-6 text-white">
          <div class="container-svg bg-white/20 p-3 rounded-xl flex-shrink-0">
            <Fragment set:html={Icons.Star} />
          </div>
          <div>
            <h3 class="  font-bold text-lg">
              Tu Evento Podría Ser el Próximo
            </h3>
            <p class="  font-semibold text-md text-white/80 mt-1">
              Los proyectos de alta calidad son seleccionados para formar parte
              de nuestro portafolio exclusivo.
            </p>
          </div>
        </div>
      </div>
    </div> -->
  </div>

  <PortfolioModal />
</section>

<script>
  import {
    getMoreInvitaciones,
    getInvitacionModalData,
  } from "@/data/invitaciones";
  const grid = document.querySelector(
    "#portfolio-grid",
  ) as HTMLUListElement | null;
  const showMoreBtn = document.querySelector(
    "#show-more-btn",
  ) as HTMLUListElement | null;

  if (!grid) throw new Error("No se encontró el contenedor #portfolio-grid");

  // Función para asignar el evento de abrir modal a una card
  function attachCardModal(card: HTMLLIElement) {
    card.addEventListener("click", () => {
      const index = parseInt(card.dataset.index!, 10);
      const data = getInvitacionModalData(index);
      if (data) {
        window.dispatchEvent(new CustomEvent("openModal", { detail: data }));
      }
    });
  }

  // Asignar modal a las cards iniciales
  grid.querySelectorAll("li").forEach(attachCardModal);

  // Manejar botón "Mostrar Más"
  showMoreBtn?.addEventListener("click", () => {
    showMoreBtn.classList.add("is-loading");

    setTimeout(() => {
      const offset = grid.children.length;
      const newInvitaciones = getMoreInvitaciones(offset);

      if (newInvitaciones.length === 0) {
        showMoreBtn.parentElement?.classList.add("hidden");
        showMoreBtn.classList.remove("is-loading");
        return;
      }

      const templateCard = grid.querySelector("li");
      if (!templateCard) return;

      newInvitaciones.forEach((inv, i) => {
        const li = templateCard.cloneNode(true) as HTMLLIElement;

        // Actualizamos contenido
        const img = li.querySelector("img");
        if (img) {
          img.src = inv.thumb || "";
          img.alt = inv.title;
        }

        const titleEl = li.querySelector("h3");
        if (titleEl) titleEl.textContent = inv.title;

        const event_typeEl = li.querySelector(".event_type");
        if (event_typeEl) event_typeEl.textContent = inv.event_type;

        const descEl = li.querySelector(".description_card");
        if (descEl) descEl.textContent = inv.description || "";

        li.dataset.index = (offset + i).toString();

        // Clases de animación
        li.classList.add("animate-on-scroll");
        li.classList.remove("is-in-view"); // asegurarnos de resetear la animación

        grid.appendChild(li);

        attachCardModal(li);

        // 🔹 Forzar reflow
        void li.offsetWidth;

        // Ejecutar animación con un pequeño delay para cada card
        setTimeout(() => {
          li.classList.add("is-in-view");
        }, i * 100); // 100ms entre cada card
      });

      showMoreBtn.classList.remove("is-loading");

      // Ocultar botón si no quedan más invitaciones
      const remaining = getMoreInvitaciones(grid.children.length);
      if (remaining.length === 0) {
        showMoreBtn.parentElement?.classList.add("hidden");
      }
    }, 300);
  });
</script>

<!-- Script dinámico -->
<script>
  import {
    getMoreInvitaciones,
    getInvitacionModalData,
  } from "@/data/invitaciones";

  import Swiper from "swiper";
  import { Pagination } from "swiper/modules";

  const showMoreBtnMobile = document.getElementById("showMoreBtnMobile");
  const swiperContainer = document.getElementById("swiper-cards");

  function normalizeSlideHeights() {
    const slides = document.querySelectorAll(".mySwiper .swiper-slide");
    let maxHeight = 0;

    slides.forEach((slide) => {
      (slide as HTMLElement).style.height = "auto"; // reset
      maxHeight = Math.max(maxHeight, (slide as HTMLElement).offsetHeight);
    });

    slides.forEach((slide) => {
      (slide as HTMLElement).style.height = `${maxHeight}px`;
    });
  }

  // Función para asignar el evento de abrir modal a una card
   function attachCardModal(card: HTMLLIElement) {
    card.addEventListener("click", () => {
      const index = parseInt(card.dataset.index!, 10);
      const data = getInvitacionModalData(index);
      if (data) {
        window.dispatchEvent(new CustomEvent("openModal", { detail: data }));
      }
    });
  }

  function loadSwiperCSS() {
    const swiper = new Swiper(".mySwiper", {
      modules: [Pagination],
      slidesPerView: 1,
      spaceBetween: 16,
      freeMode: true,
      grabCursor: true,
      mousewheel: true,
      keyboard: {
        enabled: true,
      },
      pagination: {
        el: ".swiper-pagination",
        type: "progressbar",
      },
      breakpoints: {
        300: { slidesPerView: 1.3 },
        480: { slidesPerView: 1.5 },
        640: { slidesPerView: 2 },
      },
      on: {
        init: normalizeSlideHeights,
        resize: normalizeSlideHeights,
        update: normalizeSlideHeights,
      },
    });
    // Si ya existe, no volver a inyectar
    if (!document.getElementById("swiper-css")) {
      // Swiper base CSS
      const link = document.createElement("link");
      link.id = "swiper-css";
      link.rel = "stylesheet";
      link.href =
        "https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css";
      document.head.appendChild(link);

      // Tus estilos personalizados
      const style = document.createElement("style");
      style.id = "swiper-custom-styles";
      style.textContent = `
        .swiper {
          padding-bottom: 3rem;
        }
        .swiper-slide {
          display: flex;
          justify-content: center;
          align-items: stretch;
        }
        .swiper-slide > div {
          flex: 1 !important;
        }
        .swiper-pagination {
          position: absolute;
          bottom: 0;
          left: 50% !important;
          top: unset !important;
          transform: translateX(-50%);
          width: 80% !important;
          height: 6px;
          background-color: #e5e7eb;
          border-radius: 30px;
          overflow: hidden;
        }
        .swiper-pagination-progressbar-fill {
          background: #4f46e5 !important;
          border-radius: 30px;
        }
      `;
      document.head.appendChild(style);
    }

    if (swiperContainer) {
      swiperContainer.querySelectorAll("li").forEach(attachCardModal);
    }

    if (showMoreBtnMobile && swiperContainer) {
      showMoreBtnMobile.addEventListener("click", () => {
        showMoreBtnMobile.classList.add("is-loading");

        setTimeout(() => {
          const offset =
            swiperContainer.querySelectorAll(".swiper-slide").length;
          const newInvitaciones = getMoreInvitaciones(offset - 1);

          if (newInvitaciones.length === 0) {
            showMoreBtnMobile?.classList.add("hidden");
            return;
          }

          const templateCard = swiperContainer.querySelector("li");
          if (!templateCard) return;

          const newSlides: HTMLElement[] = [];

          newInvitaciones.forEach((inv, i) => {
            // Clonamos el <li> que ya tiene PortfolioCard
          const li = templateCard.cloneNode(true) as HTMLLIElement;

            // Actualizamos contenido
            const img = li.querySelector("img");
            if (img) {
              img.src = inv.thumb || "";
              img.alt = inv.title;
            }

            const titleEl = li.querySelector("h3");
            if (titleEl) titleEl.textContent = inv.title;

            const event_typeEl = li.querySelector(".event_type");
            if (event_typeEl) event_typeEl.textContent = inv.event_type;

            const descEl = li.querySelector(".description_card");
            if (descEl) descEl.textContent = inv.description || "";

            li.dataset.index = ((offset - 1 ) + i).toString();
            li.classList.add("animate-on-scroll");
            li.classList.remove("is-in-view"); // reset animación

            // Creamos slide
            const slide = document.createElement("div");
            slide.className = "swiper-slide flex";
            const inner = document.createElement("div");
            inner.className = "w-full min-h-[420px] flex";
            inner.appendChild(li);
            slide.appendChild(inner);

            newSlides.push(slide);
          });

          // Insertamos slides antes del slide del botón
          showMoreBtnMobile?.closest(".swiper-slide");
          newSlides.forEach((slide) => {
            if (showMoreBtnMobile) {
              swiperContainer.insertBefore(slide, showMoreBtnMobile);
            } else {
              swiperContainer.appendChild(slide);
            }
          });

          // Si no quedan más invitaciones, eliminamos slide del botón
          const remaining = getMoreInvitaciones(swiperContainer.querySelectorAll(".swiper-slide").length);
          if (remaining.length === 0 && showMoreBtnMobile) {
            showMoreBtnMobile.remove();
          }

          // Refrescamos Swiper
          swiper.update();

          // Reasignamos eventos de modal
          swiperContainer.querySelectorAll("li").forEach(attachCardModal);

          // Forzar animación
          newSlides.forEach((slide, i) => {
            const li = slide.querySelector("li");
            if (li) {
              setTimeout(() => li.classList.add("is-in-view"), i * 100);
            }
          });

          normalizeSlideHeights();

          showMoreBtnMobile.classList.remove("is-loading");
        }, 300);
      });
    }
  }

  // Detectar mobile (breakpoint md:hidden → ~768px)
  if (window.matchMedia("(max-width: 767px)").matches) {
    loadSwiperCSS();
  }

  // Opcional: volver a evaluar en resize
  window.addEventListener("resize", () => {
    if (window.matchMedia("(max-width: 767px)").matches) {
      loadSwiperCSS();
    }
  });
</script>

<style>
  /* ✅ CAMBIO: CSS para manejar el estado de carga del botón */
  #show-more-btn .btn-loader {
    display: none; /* Oculto por defecto */
  }

  #show-more-btn.is-loading .btn-loader {
    display: flex; /* Se muestra cuando el botón está cargando */
    justify-content: center;
    align-items: center;
    gap: 8px;
  }

  #show-more-btn.is-loading .btn-text {
    display: none; /* Se oculta el texto cuando está cargando */
  }

  #show-more-btn.is-loading {
    cursor: wait;
  }

  #showMoreBtnMobile {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--brand-indigo);
    font-size: 18px;
    gap: 1rem;
    transition: all 0.3s !important;
  }

  .container-svg :global(svg) {
    width: 45px;
    height: 45px;
    color: var(--brand-indigo);
  }

  /* Animación de los puntos del loader */
  .dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--brand-indigo);
    animation: pulse-dot 1.4s ease-in-out infinite;
  }
  .dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  .dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes pulse-dot {
    0%,
    100% {
      transform: scale(0.8);
      opacity: 0.5;
    }
    50% {
      transform: scale(1.2);
      opacity: 1;
    }
  }
</style>
