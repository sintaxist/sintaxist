---
import SectionLayout from "@/layouts/SectionLayout.astro";
import AnimatedCounter from "@/components/ui/AnimatedCounter.astro";
import Button from "@/components/ui/Button.astro";
import SectionTitle from "@/components/ui/SectionTitle.astro";

const { t } = Astro.props;
---

<SectionLayout id="aboutMe" color="primary">
  <article class="flex flex-col gap-8 sm:gap-10">
    <SectionTitle color="secondary" text={t.title} tag="h2" />

    <p class="font-secondary text-sm xs:text-base sm:text-md md:text-lg">
      {t.paragraph1}
    </p>

    <p class="font-secondary text-sm xs:text-base sm:text-md md:text-lg">
      {t.paragraph2}
    </p>

    <div
      class="flex gap-10 flex-col items-center sm:items-start sm:flex-row sm:gap-6 text-left justify-between"
    >
      {
        t.stats.map((stat, index) => (
          <div
            class="anim-item flex flex-wrap flex-col sm:flex-row text-center sm:text-left items-center sm:items-start gap-3"
            data-delay={index * 300}
            data-animate="text"
          >
            <span class="font-primary text-5xl sm:text-6xl md:text-7xl leading-none">
              <AnimatedCounter to={stat.to} suffix={stat.suffix} />
            </span>
            <span
              class="font-primary text-md sm:text-lg uppercase leading-[160%]"
              set:html={stat.text}
            />
          </div>
        ))
      }
    </div>

    <div class="md:mx-auto">
      <Button
        as="a"
        href="#contact"
        text={t.cta}
        fill={true}
        color="white"
        arrow={true}
      />
    </div>
  </article>
</SectionLayout>
<script is:inline defer>
  function animateCounter(element) {
    if (element.hasAttribute("data-animated")) return;
    element.setAttribute("data-animated", "true");

    const to = parseInt(element.dataset.to || "0", 10);
    const from = parseInt(element.dataset.from || "0", 10);
    const duration = parseInt(element.dataset.duration || "2000", 10);
    const suffix = element.dataset.suffix || "";
    const delay = parseInt(element.dataset.delay || "0", 10);

    setTimeout(() => {
      let startTime = null;
      const step = (timestamp) => {
        if (!startTime) startTime = timestamp;
        const progress = Math.min((timestamp - startTime) / duration, 1);
        const current = Math.floor(progress * (to - from) + from);
        element.textContent = current.toLocaleString() + suffix;
        if (progress < 1) {
          window.requestAnimationFrame(step);
        }
      };
      window.requestAnimationFrame(step);
    }, delay);
  }

  // Usamos astro:page-load para que se reinicie en cada navegaciÃ³n
  document.addEventListener("astro:page-load", () => {
    const counters = document.querySelectorAll('[data-animate="counter"]');

    if (counters.length > 0) {
      const counterObserver = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              animateCounter(entry.target);
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.5 }
      );

      counters.forEach((counter) => counterObserver.observe(counter));
    }
  });
</script>
