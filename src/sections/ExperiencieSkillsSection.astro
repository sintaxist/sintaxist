---
import SectionLayout from "@/layouts/SectionLayout.astro";
import SkillCategory from "@/components/SkillCategory.astro";
import ExperienceItem from "@/components/ExperienceItem.astro";
import Button from "@/components/ui/Button.astro";
import SectionTitle from "@/components/ui/SectionTitle.astro";

const { experience, skills } = Astro.props;

const lang = Astro.url.pathname.split("/")[1] || "es";
const cvPath = `/cv/Alejandro-Canek-CV-${lang}.pdf`;
---

<SectionLayout
  id="experience"
  color="primary"
  className="flex flex-col gap-8 sm:gap-12"
  secondChild={true}
  secondId="skills"
>
  <!-- Experience -->

  <SectionTitle color="secondary" text={experience.title} tag="h2" />

  <div class="flex flex-col gap-12 md:gap-16">
    {
      experience.jobs.map((job, index) => (
        <ExperienceItem
          job={job}
          isLast={index === experience.jobs.length - 1}
        />
      ))
    }
  </div>

  <div>
    <Button
      as="a"
      href={cvPath}
      text={experience.cta_download_cv}
      fill={false}
      color="secondary"
      arrow={true}
      download
    />
  </div>

  <!-- Skills -->

  <div slot="secondary" class="flex flex-col gap-8 sm:gap-12">
    <SectionTitle color="secondary" text={skills.title} tag="h2" />

    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-12 gap-y-10">
      {
        skills.categories.map((category, index) => (
          <article
            class="anim-item"
            data-delay={index * 200}
            data-animate="text"
          >
            <SkillCategory {category} />
          </article>
        ))
      }
    </div>
  </div>
</SectionLayout>
<script>
  // --- LÓGICA PARA LA LÍNEA DE TIEMPO DE EXPERIENCIA ---
  const experienceItems = document.querySelectorAll(".experience-item");

  if (experienceItems.length > 0) {
    const experienceObserver = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const item = entry.target;
            item.classList.add("is-visible"); // Activa la animación de la línea y la aparición del icono

            const icon = item.querySelector(".timeline-icon");
            if (icon) {
              // Añadimos la clase para el pulso. El retardo ('animation-delay') está en el CSS.
              icon.classList.add("should-pulse");
            }

            observer.unobserve(item);
          }
        });
      },
      { threshold: 0.4 }
    ); // Se activa cuando el 40% del item es visible

    experienceItems.forEach((item) => {
      experienceObserver.observe(item);
    });
  }
</script>
