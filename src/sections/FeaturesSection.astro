---
import SectionParticles from "@/components/SectionParticles.astro";
import { features } from "@/data/featuressection";
import { Image } from "astro:assets";
---

<section id="features" class="py-20 lg:py-32 px-6 relative">
  <SectionParticles />
  <div class="max-w-7xl mx-auto relative z-10">
    <div class="md:text-center mb-20">
      <h2 class="  font-bold text-4xl lg:text-6xl text-gray-900 mb-6">
        Creatividad Sin Límites, <span class="text-indigo-600">momentos inolvidables.</span>
      </h2>
      <p
        class="  font-normal text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed"
      >
       Fusionamos un diseño excepcional con tecnología intuitiva para que la organización de tu evento sea tan placentera como la celebración misma.
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 items-start">
      <div class="hidden lg:block relative lg:sticky lg:top-32 h-[450px]">
        {
          features.map((feature, index) => (
            <div
              class={`feature-image-container ${index === 0 ? "is-active" : ""}`}
              data-index={index}
            >
              <div class="relative rounded-3xl overflow-hidden bg-white/40 backdrop-blur-xl border border-white/30 shadow-xl w-full h-full">
                <Image
                  src={feature.image}
                  alt={feature.title}
                  width={400}
                  height={300}
                  sizes="(max-width: 600px) 400px, 800px"
                  class="w-full h-full object-cover"
                  loading="lazy"
                  sizes="(max-width: 640px) 100vw, 179px"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent" />
                <div class="absolute bottom-6 left-6 right-6">
                  <div class="flex items-center space-x-3 bg-white/20 backdrop-blur-xl rounded-2xl p-4 border border-white/30">
                    <div class="p-3 rounded-full bg-indigo-500 w-13 h-13 flex items-center justify-center">
                      <Fragment set:html={feature.icon} />
                    </div>
                    <h3 class="  font-semibold text-white text-lg">
                      {feature.title}
                    </h3>
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>

      <ul
        class="grid grid-cols-1 xs:grid-cols-2 lg:grid-cols-1 gap-x-8 gap-y-16"
      >
        {
          features.map((feature, index) => (
            <li
              class="feature-card p-0 md:p-6 rounded-2xl transition-colors duration-500 ease-out cursor-pointer bg-white/30 backdrop-blur-xl border border-white/30 hover:bg-indigo-50/50 animate-on-scroll"
              data-index={index}
              style={`transition-delay: ${index * 150}ms;`}
            >
              <article class="flex items-center md:items-start flex-col md:flex-row space-x-0 md:space-x-4 space-y-4 md:space-y-0">
                <div class="feature-icon-wrapper p-3 rounded-xl transition-all duration-300 bg-gray-200 w-13 h-13 flex items-center justify-center">
                  <Fragment set:html={feature.icon} />
                </div>
                <div class="flex-1">
                  <h3 class="  font-semibold feature-title text-lg md:text-xl mb-2 transition-colors duration-300 text-gray-900 text-center md:text-left">
                    {feature.title}
                  </h3>
                  <p class="  text-sm sm:text-base text-gray-600 leading-relaxed text-center md:text-left" set:html={feature.description}></p>
                </div>
              </article>
              <div class="feature-bar mt-4 h-1 bg-indigo-500 rounded-full hidden lg:flex" />
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const featureCards = document.querySelectorAll(".feature-card");
    const imageContainers = document.querySelectorAll(
      ".feature-image-container"
    );
    let activeIndex = 0;
    let isClickScrolling = false;

    const isDesktop = window.matchMedia("(min-width: 1024px)").matches;

    function setActiveFeature(index) {
      if (
        index === activeIndex &&
        document.querySelector(".feature-card.is-active")
      )
        return;
      imageContainers.forEach((c, i) =>
        c.classList.toggle("is-active", i === index)
      );
      featureCards.forEach((card, i) =>
        card.classList.toggle("is-active", i === index)
      );
      activeIndex = index;
    }

    function smoothScroll(target, callback) {
      const start = window.scrollY;
      const end = target.getBoundingClientRect().top + window.scrollY - 120; // offset 120px
      const duration = 500; // más natural
      let startTime = null;

      function easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
      }

      function animation(currentTime) {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const progress = Math.min(timeElapsed / duration, 1);
        const run = start + (end - start) * easeInOutQuad(progress);
        window.scrollTo(0, run);
        if (timeElapsed < duration) {
          requestAnimationFrame(animation);
        } else if (callback) {
          callback();
        }
      }

      requestAnimationFrame(animation);
    }

    // Observer SIEMPRE activo, pero no actúa durante scroll por click
    const observer = new IntersectionObserver(
      (entries) => {
        if (isClickScrolling) return;
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const idx = parseInt(entry.target.dataset.index || "0", 10);
            setActiveFeature(idx);
          }
        });
      },
      // un poco más “estricto” para evitar activar la siguiente tarjeta durante el scroll
      { rootMargin: "-45% 0px -55% 0px", threshold: 0 }
    );
    featureCards.forEach((card) => observer.observe(card));

    // Click + smoothScroll SOLO en desktop (≥1024px)
    if (isDesktop) {
      featureCards.forEach((card, index) => {
        card.addEventListener("click", () => {
          isClickScrolling = true;
          setActiveFeature(index);
          smoothScroll(card, () => {
            // damos un respiro para que termine inercia de scroll antes de reactivar el observer
            setTimeout(() => (isClickScrolling = false), 150);
          });
        });
      });
    }

    // activar primera al cargar
    setActiveFeature(0);
  });
</script>

<style>
  /* Estilos locales (scoped) para la sección */
  .feature-image-container {
    position: absolute;
    inset: 0;
    opacity: 0;
    transform: scale(0.95);
    transition:
      opacity 0.5s ease-in-out,
      transform 0.5s ease-in-out;
  }
  .feature-image-container.is-active {
    opacity: 1;
    transform: scale(1);
  }
  .feature-card.is-active {
    background-color: rgba(255, 255, 255, 0.6);
    border-color: var(--brand-indigo);
    box-shadow:
      0 10px 15px -3px rgb(0 0 0 / 0.1),
      0 4px 6px -4px rgb(0 0 0 / 0.1);
  }
  .feature-card.is-active .feature-icon-wrapper {
    background-color: var(--brand-indigo);
  }
  .feature-card.is-active .feature-title {
    color: var(--brand-indigo);
  }
  .feature-bar {
    width: 0%;
    transition: width 0.5s ease-in-out;
  }
  .feature-card.is-active .feature-bar {
    width: 100%;
  }

  @media (max-width: 1024px) {
    .feature-card.is-active {
      background-color: unset;
      border-color: transparent;
      box-shadow: unset;
    }

    .feature-card:hover {
      background-color: white;
    }
    .feature-card.is-active .feature-icon-wrapper {
      background-color: var(--color-gray-200);
    }

    .feature-card.is-active .feature-icon-wrapper :global(svg) {
      color: var(--color-gray-900);
    }
    .feature-card.is-active .feature-title {
      color: var(--color-gray-900);
    }
  }
</style>

<style is:global>
  .feature-image-container .lucide {
    color: white;
  }
  .feature-card.is-active .feature-icon-wrapper svg {
    color: white;
  }
</style>
