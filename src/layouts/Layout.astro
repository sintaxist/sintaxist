---
import CustomCursor from "@/components/CustomCursor.astro";
import "../styles/global.css";
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  noNavgation?: boolean;
  headerInfo?: object;
  footerInfo?: object;
  sections?: object;
}

const {
  title,
  description,
  noNavgation = false,
  headerInfo,
  footerInfo,
  sections,
} = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="x-apple-disable-message-reformatting" />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>

    <meta name="description" content={description} />

    <!-- <link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/favicon/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/favicon/favicon-16x16.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicon/apple-touch-icon.png"
    />
    <link rel="manifest" href="/favicon/site.webmanifest" /> -->

    <!-- Google Fonts optimizado -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="preload"
      as="style"
      href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&display=swap"
      onload="this.rel='stylesheet'"
    />
    <noscript>
      <link
        href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&display=swap"
        rel="stylesheet"
      />
    </noscript>

    <!-- <link rel="preload" href="/fonts/BronzierRusty.woff2" as="font" type="font/woff2" crossorigin> -->

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      property="og:image"
      content="https://www.momentainvitaciones.com.mx/opengraph.png"
    />
    <meta property="og:url" content="https://www.momentainvitaciones.com.mx" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={title} />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content="https://www.momentainvitaciones.com.mx/opengraph.png"
    />

    <ClientRouter />
  </head>
  <body class="bg-secondary text-primary">
    <CustomCursor />
    {noNavgation ? null : <Header t={headerInfo} {sections} />}
    <main>
      <slot />
    </main>
    {noNavgation ? null : <Footer t={footerInfo} {sections} />}
  </body>
</html>

<script is:inline>
  const hasBeenRedirected = sessionStorage.getItem("lang_redirected");

  if (!hasBeenRedirected) {
    const userLang = navigator.language.split("-")[0];
    const currentPath = window.location.pathname;

    if (userLang === "en" && currentPath === "/") {
      window.location.href = "/en/";
    }

    sessionStorage.setItem("lang_redirected", "true");
  }

  const lang = localStorage.getItem("lang") || "es";
  document.documentElement.lang = lang;
  document.documentElement.classList.add(`lang-${lang}`);
</script>

<script is:inline defer>
  let lastNavigationDirection = 'initial';

  document.addEventListener('astro:before-swap', (event) => {
    lastNavigationDirection = event.direction;
  });

  document.addEventListener("astro:page-load", () => {
    const animationGroups = document.querySelectorAll(".animation-group");
    
    if (animationGroups.length > 0) {
      const observer = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const group = entry.target;
              const elementsToAnimate = group.querySelectorAll('[data-animate="text"]');

              elementsToAnimate.forEach((element) => {
                const isCard = element.getAttribute('data-animation-type') === 'card';

                if (lastNavigationDirection === 'back' && isCard) {
                  element.classList.add('no-transition');
                  element.classList.add('is-visible');
                } 

                else {
                  animateText(element);
                }
              });

              observer.unobserve(group);
            }
          });
        },
        { threshold: 0.2 }
      );

      animationGroups.forEach((group) => observer.observe(group));
    }

    function animateText(element) {
      const delay = parseInt(element.getAttribute("data-delay")) || 0;
      setTimeout(() => {
        element.classList.add("is-visible");
      }, delay);
    }
  });
</script>
