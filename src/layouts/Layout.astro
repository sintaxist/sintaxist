---
import CustomCursor from "@/components/CustomCursor.astro";
import "../styles/global.css";
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  noNavgation?: boolean;
  headerInfo?: object;
  footerInfo?: object;
  sections?: object;
}

const {
  title,
  description,
  noNavgation = false,
  headerInfo,
  footerInfo,
  sections,
} = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="x-apple-disable-message-reformatting" />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>

    <meta name="description" content={description} />

    <!-- Favicon -->

    <link
      rel="icon"
      type="image/png"
      href="/favicon/favicon-96x96.png"
      sizes="96x96"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
    <link rel="shortcut icon" href="/favicon/favicon.ico" />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicon/apple-touch-icon.png"
    />
    <meta name="apple-mobile-web-app-title" content="MyWebSite" />
    <link rel="manifest" href="/favicon/site.webmanifest" />

    <!-- Google Fonts optimizado -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="preload"
      as="style"
      href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&display=swap"
      onload="this.rel='stylesheet'"
    />
    <noscript>
      <link
        href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&display=swap"
        rel="stylesheet"
      />
    </noscript>

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      property="og:image"
      content="https://alejandrocanek.vercel.app/opengraph.png"
    />
    <meta property="og:url" content="https://alejandrocanek.vercel.app/" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={title} />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content="https://alejandrocanek.vercel.app/opengraph.png"
    />

    <!-- <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" /> -->

    <ClientRouter />
  </head>
  <body class="bg-secondary text-primary">
    <CustomCursor />
    {noNavgation ? null : <Header t={headerInfo} {sections} />}
    <main>
      <slot />
    </main>
    {noNavgation ? null : <Footer t={footerInfo} {sections} />}
  </body>
</html>

<script is:inline>
  const hasBeenRedirected = sessionStorage.getItem("lang_redirected");

  if (!hasBeenRedirected) {
    const userLang = navigator.language.split("-")[0];
    const currentPath = window.location.pathname;

    if (userLang === "en" && currentPath === "/") {
      window.location.href = "/en/";
    }

    sessionStorage.setItem("lang_redirected", "true");
  }

  const lang = localStorage.getItem("lang") || "es";
  document.documentElement.lang = lang;
  document.documentElement.classList.add(`lang-${lang}`);
</script>

<script is:inline>
  let lastNavigationDirection = "initial";
  let isNavigating = false;
  let animationsComplete = false;

  // Detectar dirección de navegación
  document.addEventListener("astro:before-preparation", (event) => {
    lastNavigationDirection = event.direction;
  });

  // Antes de cambiar de página, marcar que estamos navegando
  document.addEventListener("astro:before-swap", () => {
    isNavigating = true;
    animationsComplete = false;
    // Cancelar cualquier animación pendiente
    const animatingElements = document.querySelectorAll(".is-animating");
    animatingElements.forEach((el) => {
      el.classList.remove("is-animating");
    });
  });

  document.addEventListener("astro:page-load", () => {
    // Resetear el flag después de un pequeño delay
    setTimeout(() => {
      isNavigating = false;
    }, 100);

    const animationGroups = document.querySelectorAll(".animation-group");

    // Bloquear clicks en las cards durante las animaciones
    const projectCards = document.querySelectorAll(".project-card");
    if (projectCards.length > 0 && lastNavigationDirection !== "back") {
      projectCards.forEach((card) => {
        card.style.pointerEvents = "none";
      });
    }

    if (animationGroups.length > 0) {
      let totalAnimations = 0;
      let completedAnimations = 0;

      animationGroups.forEach((group) => {
        const elements = group.querySelectorAll('[data-animate="text"]');
        totalAnimations += elements.length;
      });

      const observer = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const group = entry.target;
              const elementsToAnimate = group.querySelectorAll(
                '[data-animate="text"]'
              );

              elementsToAnimate.forEach((element) => {
                const isCard =
                  element.getAttribute("data-animation-type") === "card";

                if (lastNavigationDirection === "back" && isCard) {
                  element.classList.add("no-transition");
                  element.classList.add("is-visible");
                  completedAnimations++;
                } else {
                  animateText(element, () => {
                    completedAnimations++;
                    // Cuando todas las animaciones terminen, habilitar clicks
                    if (completedAnimations >= totalAnimations) {
                      enableProjectCards();
                    }
                  });
                }
              });

              observer.unobserve(group);
            }
          });
        },
        { threshold: 0.1 }
      );

      animationGroups.forEach((group) => observer.observe(group));

      if (!animationsComplete) {
        enableProjectCards();
      }
    } else {
      enableProjectCards();
    }

    function animateText(element, callback) {
      const delay = parseInt(element.getAttribute("data-delay")) || 0;
      const animationDuration = 600; // duración de la animación en ms

      setTimeout(() => {
        if (isNavigating) {
          callback && callback();
          return;
        }
        element.classList.add("is-visible", "is-animating");

        // Llamar al callback cuando termine la animación
        setTimeout(() => {
          callback && callback();
        }, animationDuration);
      }, delay);
    }

    function enableProjectCards() {
      if (animationsComplete) return;
      animationsComplete = true;

      const projectCards = document.querySelectorAll(".project-card");
      projectCards.forEach((card) => {
        card.style.pointerEvents = "auto";
      });
    }

    // Si venimos de 'back', habilitar inmediatamente
    if (lastNavigationDirection === "back") {
      enableProjectCards();
    }
  });

  // Limpiar estado al terminar la transición
  document.addEventListener("astro:after-swap", () => {
    isNavigating = false;
  });
</script>
<script is:inline src="https://unpkg.com/aos@next/dist/aos.js"></script>
<script is:inline>
  document.addEventListener("astro:page-load", () => {
    AOS.init({
      duration: 800, // Duración de la animación
      once: true, // Animar solo una vez
    });
  });
</script>

<style is:global>
  /* Asegurar que las transiciones de página tengan prioridad */
  [data-astro-transition] {
    z-index: 10000 !important;
  }

  /* Desactivar animaciones durante transiciones de página */
  html.astro-transition * {
    animation-play-state: paused !important;
    transition: none !important;
  }
</style>
