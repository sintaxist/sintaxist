---
import Layout from "@/layouts/Layout.astro";
import ProjectCard from "@/components/ProjectCard.astro";
import { LANGUAGES } from "@/locales";

export async function getStaticPaths() {
  const paths = [];

  for (const lang of Object.keys(LANGUAGES)) {
    const t = LANGUAGES[lang].translations;
    paths.push({
      params: { lang },
      props: {
        t,
        lang,
        projects: t.projects_page.projects,
        categories: t.projects_page.categories,
      },
    });
  }

  return paths;
}


const { t, lang, projects, categories } = Astro.props;
const projectsPerPage = 6;
const initialProjects = projects.slice(0, projectsPerPage);
---

<Layout
  title={t.projects_page.all_projects_title}
  description={t.projects_page.all_projects_subtitle}
  headerInfo={t.header}
  sections={t.sections}
  footerInfo={t.footer}
>
  <div class="container-wrapper">
    <h1 class="text-4xl font-bold mb-8 text-center">
      {t.projects_page.title || "Proyectos"}
    </h1>

    <div id="projects-grid" class="projects-grid mb-8">
      {
        initialProjects.map((project, index) => {
          const position = index % 6;
          const size = position === 0 || position === 3 ? "large" : "small";
          return (
            <div
              class={`project-item div${position + 1} animated-item`}
              data-index={index}
              data-project-slug={project.slug}
            >
              <ProjectCard
                project={project}
                lang={lang}
                size={size}
                categories={categories}
              />
            </div>
          );
        })
      }
    </div>

    <!-- Templates ocultos para clonar -->
    <div id="card-templates" style="display: none;">
      {
        projects.slice(0, 6).map((project, index) => {
          const position = index % 6;
          const size = position === 0 || position === 3 ? "large" : "small";
          return (
            <div
              class={`card-template template-${position}`}
              data-pattern-index={position}
              data-size={size}
            >
              <ProjectCard
                project={project}
                lang={lang}
                size={size}
                categories={categories}
              />
            </div>
          );
        })
      }
    </div>

    <div id="loading" class="hidden text-center py-8">
      <div
        class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-current"
      >
      </div>
      <p class="mt-2">Cargando más proyectos...</p>
    </div>

    <div id="no-more" class="hidden text-center py-8 text-gray-500">
      <p>No hay más proyectos para mostrar</p>
    </div>

    <div id="sentinel" class="h-4"></div>
  </div>

  <script define:vars={{ projects, categories, lang }}>
    let currentIndex = 6;
    let isLoading = false;
    let lastNavigationDirection = 'initial';

    const projectsGrid = document.getElementById("projects-grid");
    const loading = document.getElementById("loading");
    const noMore = document.getElementById("no-more");
    const sentinel = document.getElementById("sentinel");

    // Capturar la dirección de navegación
    document.addEventListener('astro:before-swap', (event) => {
      lastNavigationDirection = event.direction;
    });

    // Aplicar animaciones solo si NO venimos de 'back'
    function initializeAnimations() {
      const items = document.querySelectorAll(".animated-item");
      
      if (lastNavigationDirection === 'back') {
        // Si venimos de atrás, no animar y hacer todo visible inmediatamente
        items.forEach((item) => {
          item.classList.add('no-transition');
          item.classList.add('is-visible');
          item.style.opacity = "1";
          item.style.transform = "translateY(0)";
        });
      } else {
        // Animación normal en primera carga
        items.forEach((item, index) => {
          item.style.opacity = "0";
          item.style.transform = "translateY(30px)";

          setTimeout(() => {
            item.style.transition = "opacity 0.6s ease-out, transform 0.6s ease-out";
            item.style.opacity = "1";
            item.style.transform = "translateY(0)";
            item.classList.add('is-visible');
          }, index * 100);
        });
      }
    }

    // Inicializar animaciones
    initializeAnimations();

    function getGridClass(index) {
      const position = index % 6;
      return `div${position + 1}`;
    }

    function createProjectCard(project, globalIndex) {
      const patternIndex = globalIndex % 6;
      const template = document.querySelector(`.card-template.template-${patternIndex}`);
      
      if (!template) {
        console.error(`Template not found for pattern index ${patternIndex}`);
        return null;
      }

      // Clonar el template
      const clonedCard = template.cloneNode(true);
      
      // Crear el wrapper
      const wrapper = document.createElement("div");
      wrapper.className = `project-item ${getGridClass(globalIndex)} animated-item`;
      wrapper.setAttribute("data-index", globalIndex);
      wrapper.setAttribute("data-project-slug", project.slug);

      // Aplicar clases de tamaño según el patrón
      if (patternIndex === 0) {
        wrapper.classList.add("is-large-left");
      } else if (patternIndex === 3) {
        wrapper.classList.add("is-large-right");
      }

      // Actualizar el contenido del clon con los datos del nuevo proyecto
      const link = clonedCard.querySelector('a');
      if (link) {
        link.href = `/${lang}/projects/${project.slug}/`;
        link.setAttribute('transition:name', project.slug);
      }

      const img = clonedCard.querySelector('img');
      if (img) {
        img.src = project.imgSrc;
        img.alt = `Imagen del proyecto ${project.title}`;
      }

      const title = clonedCard.querySelector('h3');
      if (title) {
        title.textContent = project.title;
      }

      const pillsContainer = clonedCard.querySelector('.flex.flex-wrap.gap-2');
      if (pillsContainer && project.categoryIds) {
        pillsContainer.innerHTML = '';
        project.categoryIds.forEach((tag, catIndex) => {
          const pill = document.createElement('span');
          pill.className = 'inline-flex items-center justify-center rounded-full px-3 py-1 text-xs font-medium transition-all duration-300 bg-primary/10 text-primary hover:bg-primary/20';
          pill.setAttribute('data-index', catIndex);
          pill.textContent = categories[tag] || tag;
          pillsContainer.appendChild(pill);
        });
      }

      const description = clonedCard.querySelector('.font-secondary.text-sm');
      if (description) {
        if ((patternIndex === 0 || patternIndex === 3) && project.description) {
          description.textContent = project.description;
        } else if (description.parentElement) {
          description.parentElement.removeChild(description);
        }
      }

      // Añadir el contenido clonado al wrapper
      wrapper.appendChild(clonedCard.firstElementChild);

      // Animación de entrada para nuevas cards
      wrapper.style.opacity = "0";
      wrapper.style.transform = "translateY(30px)";

      setTimeout(() => {
        wrapper.style.transition = "opacity 0.6s ease-out, transform 0.6s ease-out";
        wrapper.style.opacity = "1";
        wrapper.style.transform = "translateY(0)";
        wrapper.classList.add('is-visible');
      }, 50);

      return wrapper;
    }

    function loadMoreProjects() {
      if (isLoading || currentIndex >= projects.length) return;

      isLoading = true;
      loading.classList.remove("hidden");

      setTimeout(() => {
        const nextBatch = projects.slice(currentIndex, currentIndex + 6);

        nextBatch.forEach((project, idx) => {
          const card = createProjectCard(project, currentIndex + idx);
          if (card) {
            projectsGrid.appendChild(card);
          }
        });

        currentIndex += nextBatch.length;
        loading.classList.add("hidden");
        isLoading = false;

        if (currentIndex >= projects.length) {
          noMore.classList.remove("hidden");
          observer.disconnect();
        }
      }, 500);
    }

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          loadMoreProjects();
        }
      },
      {
        rootMargin: "100px",
      }
    );

    observer.observe(sentinel);
  </script>

  <style>
    .container-wrapper {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    .projects-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-auto-rows: 300px;
      gap: 1rem;
    }

    .project-item {
      display: contents;
    }

    .project-item > * {
      height: 100%;
    }

    .div1 {
      grid-column: 1 / 3;
      grid-row: span 2;
    }
    .div2 {
      grid-column: 3 / 4;
      grid-row: span 1;
    }
    .div3 {
      grid-column: 3 / 4;
      grid-row: span 1;
    }
    .div4 {
      grid-column: 2 / 4;
      grid-row: span 2;
    }
    .div5 {
      grid-column: 1 / 2;
      grid-row: span 1;
    }
    .div6 {
      grid-column: 1 / 2;
      grid-row: span 1;
    }

    /* Clases para evitar transiciones al regresar */
    .no-transition,
    .no-transition * {
      transition: none !important;
      transform: translateY(0) !important;
    }

    .is-visible {
      opacity: 1 !important;
      transform: translateY(0) !important;
    }

    .view-more-link {
      opacity: 0;
      transform: translateY(10px);
      overflow: hidden;
      transition: all 0.3s ease-in-out;
    }

    :global(.group:hover .view-more-link) {
      opacity: 1;
      transform: translateY(0);
    }

    @media (max-width: 1024px) {
      .projects-grid {
        grid-template-columns: repeat(2, 1fr);
        grid-auto-rows: 250px;
      }

      .div1 {
        grid-column: 1 / 3;
        grid-row: span 2;
      }
      .div2 {
        grid-column: 1 / 2;
        grid-row: span 1;
      }
      .div3 {
        grid-column: 2 / 3;
        grid-row: span 1;
      }
      .div4 {
        grid-column: 1 / 3;
        grid-row: span 2;
      }
      .div5 {
        grid-column: 1 / 2;
        grid-row: span 1;
      }
      .div6 {
        grid-column: 2 / 3;
        grid-row: span 1;
      }
    }

    @media (max-width: 640px) {
      .projects-grid {
        grid-template-columns: 1fr;
        grid-auto-rows: 300px;
      }

      .div1,
      .div2,
      .div3,
      .div4,
      .div5,
      .div6 {
        grid-column: 1 / 2;
        grid-row: span 1;
      }
    }
  </style>
</Layout>