---
import Layout from "@/layouts/Layout.astro";
import { Image } from "astro:assets";
import Pill from "@/components/ui/Pill.astro";
import SectionTitle from "@/components/ui/SectionTitle.astro";
import { LANGUAGES } from "@/locales";
import type { AppLocale } from "@/locales";
import ParagraphInfo from "@/components/ui/ParagraphInfo.astro";
import BackButton from "@/components/BackButton.astro";
import LinkDetailProject from "@/components/ui/LinkDetailProject.astro";
import ItemInfoBlog from "@/components/ui/ItemInfoBlog.astro";

export async function getStaticPaths() {
  const paths = [];

  for (const lang of Object.keys(LANGUAGES)) {
    const t = LANGUAGES[lang as AppLocale].translations;
    const projects = t.projectsPage.projects;

    projects.forEach((project, index) => {
      const prevProject = index > 0 ? projects[index - 1] : null;
      const nextProject = index < projects.length - 1 ? projects[index + 1] : null;

      paths.push({
        params: { lang, slug: project.slug },
        props: {
          project: project,
          lang: lang as AppLocale,
          header: t.header,
          sections: t.sections,
          footer: t.footer,
          titles: t.projectsPage.titles,
          categories: t.projectsPage.categories,
          ctaBack: t.projectsPage.ctaBack,
          previousProject: prevProject
            ? { slug: prevProject.slug, title: prevProject.title }
            : null,
          nextProject: nextProject
            ? { slug: nextProject.slug, title: nextProject.title }
            : null,
        },
      });
    });
  }

  return paths;
}

const { project, lang, header, sections, footer, categories, ctaBack, titles, previousProject, nextProject,  } =
  Astro.props;
---

<Layout
  title={`${project.title} — Caso de Estudio`}
  description={project.intro}
  headerInfo={header}
  sections={sections}
  footerInfo={footer}
>
  <article
    class="max-w-5xl mx-auto px-6 sm:px-8 flex flex-col gap-8 md:gap-16 pt-25 md:pt-30 pb-16 animation-group text-primary font-secondary"
    transition:name={project.slug}
  >
    <header class="flex flex-col gap-4">
      <BackButton info={ctaBack} />
      <h1
        class="md:text-center font-primary text-2xl sm:text-3xl md:text-5xl text-primary mb-4 leading-[130%] anim-item"
        data-animate="text"
      >
        {project.title}
      </h1>
      <div class="flex flex-wrap gap-2 md:justify-center">
        {
          project.categoryIds?.map((cat, index) => (
            <Pill label={categories[cat] || cat} {index} primary delay={200} />
          ))
        }
      </div>
      <Image
        src={project.imgSrc}
        alt={`Diseño del proyecto ${project.title}`}
        width={1200}
        height={400}
        class="w-full m-auto shadow-lg rounded-lg mt-2"
        data-animate="text"
        data-delay={200}
      />
      <div class="flex items-center gap-4 mt-2">
        {
          project.figmaUrl && (
            <LinkDetailProject
              url={project.figmaUrl}
              text={project.textFigmaUrl}
              icon="figma"
            />
          )
        }
      </div>
    </header>

    <section class="flex flex-col gap-6 md:gap-10">
      <SectionTitle color="primary" text="Contexto" tag="h2" />
      <ParagraphInfo text={project.overview} />
      {
        (project.timeframe || project.role || project.tools) &&
        <ul class="flex flex-col md:flex-row gap-8">
          {
            project.timeframe &&
            <li class="flex flex-col gap-3 flex-1">
              <h3 class="underline font-bold text-lg md:text-xl">
                {titles.timeframe}
              </h3>
              <p class="text-sm md:text-base lg:text-md">{project.timeframe}</p>
            </li>
          }
          {
            project.role &&
            <li class="flex flex-col gap-3 flex-1">
              <h3 class="underline font-bold text-lg md:text-xl">{titles.role}</h3>
              <p class="text-sm md:text-base lg:text-md">{project.role}</p>
            </li>
          }
          {
            project.tools &&
            <li class="flex flex-col gap-3 flex-1">
              <h3 class="underline font-bold text-lg md:text-xl">
                {titles.tools}
              </h3>
              <p class="text-sm md:text-base lg:text-md">{project.tools}</p>
            </li>
          }
        </ul>
      }
    </section>

    {
      (project.challenge || project.goal) && 
      <hr class="w-full text-primary" />
      <section class="flex flex-col gap-6 md:gap-10">
        {
          project.challenge &&
          <ItemInfoBlog
            title={titles.challenge}
            description={project.challenge.description}
          />
        }
        {
          project.goal &&
          <ItemInfoBlog
            title={titles.goal}
            description={project.goal.description}
          />
        }
      </section>
    }

    {
      project.process &&
      <hr class="w-full text-primary" />
      <section class="flex flex-col gap-8 md:gap-10">
        <SectionTitle color="primary" text={titles.process} tag="h2" />
        <div class="flex flex-col gap-6 md:gap-10">
          {
            project.process.childs.map((child) => (
              <ItemInfoBlog
                title={child.title}
                description={child.description}
                list={child.list}
              />
            ))
          }
        </div>
      </section>
    }

    {
      project.results &&
      <hr class="w-full text-primary" />
      <section class="flex flex-col gap-8 md:gap-10">
        <SectionTitle color="primary" text={titles.results} tag="h2" />
        <div class="flex flex-col gap-6 md:gap-10">
          {
            project.results.childs.map((child) => (
              <ItemInfoBlog
                title={child.title}
                description={child.description}
                list={child.list}
              />
            ))
          }
        </div>
      </section>
    }

    {
      project.gallery && project.gallery.length > 0 && (
          <hr class="w-full text-primary" />
          <section class="flex flex-col gap-8 md:gap-10">
            <SectionTitle color="primary" text={titles.gallery} tag="h2" />
            <div class="grid grid-cols-2 md:grid-cols-3 gap-4 md:gap-6 h-[400px]">
              {project.gallery.map((image) => (
                <div class="aspect-video h-full w-full bg-gray-100 rounded-md overflow-hidden cursor-pointer shadow-md hover:shadow-xl transition-all duration-300 group">
                  <Image
                    src={image.src}
                    alt={image.alt}
                    width={600}
                    height={400}
                    class="w-full h-full object-cover gallery-image group-hover:scale-110 transition-transform duration-300"
                    data-alt={image.alt}
                    loading="lazy"
                  />
                </div>
              ))}
            </div>
          </section>
      )
    }

    {
      project.future &&
      <hr class="w-full text-primary" />
      <section class="flex flex-col gap-8 md:gap-10">
        <SectionTitle color="primary" text={titles.future} tag="h2" />
        <ParagraphInfo text={project.future.description} />
      </section>
    }

    {
      project.figmaEmbed &&
      <hr class="w-full text-primary" />
      <section class="flex flex-col gap-8 md:gap-10">
        <SectionTitle color="primary" text={titles.prototype} tag="h2" />
        <div id="figma-container" class="relative">
          <iframe
            id="figma-iframe"
            data-src={project.figmaEmbed}
            class="w-full h-[400px] md:h-[600px] mt-8 rounded-lg shadow-md border border-gray-200"
            allowfullscreen
          >
          </iframe>
        </div>
      </section>
    }

    <nav class="flex flex-col sm:flex-row justify-between items-center gap-6 mt-8 md:mt-12 border-t border-primary pt-8">
      <div class="text-center sm:text-left min-w-0">
        {previousProject && (
          <a href={`/${lang}/projects/${previousProject.slug}/`} class="text-primary hover:text-primary-hover transition-colors duration-300 group">
            <span class="text-sm text-gray-500 block">← Anterior</span>
            <p class="font-bold text-lg text-clamp-2">{previousProject.title}</p>
          </a>
        )}
      </div>
      <div class="text-center sm:text-right min-w-0">
        {nextProject && (
          <a href={`/${lang}/projects/${nextProject.slug}/`} class="text-primary hover:text-primary-hover transition-colors duration-300 group">
            <span class="text-sm text-gray-500 block">Siguiente →</span>
            <p class="font-bold text-lg text-clamp-2">{nextProject.title}</p>
          </a>
        )}
      </div>
    </nav>
  </article>
</Layout>

<div id="image-modal" class="fixed inset-0 bg-black bg-opacity-85 z-52 flex items-center justify-center p-4 opacity-0 pointer-events-none transition-opacity duration-300" aria-modal="true" role="dialog">
  
  <div id="modal-content" class="relative scale-95 transition-transform duration-300 rounded-lg overflow-hidden">
    <img id="modal-image" src="" alt="" class="object-contain max-w-[90vw] max-h-[90vh]" />
  </div>

  <button id="modal-close-btn" class="absolute top-4 right-4 text-white bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center text-3xl font-light hover:bg-opacity-80 transition-all" aria-label="Cerrar imagen">
    &times;
  </button>

  <button id="modal-prev-btn" class="absolute left-4 top-1/2 -translate-y-1/2 text-white bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center text-2xl hover:bg-opacity-80 hover:scale-110 transition-all duration-200" aria-label="Imagen anterior">
    &#x2190;
  </button>

  <button id="modal-next-btn" class="absolute right-4 top-1/2 -translate-y-1/2 text-white bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center text-2xl hover:bg-opacity-80 hover:scale-110 transition-all duration-200" aria-label="Siguiente imagen">
    &#x2192;
  </button>

  <div id="modal-counter" class="absolute bottom-4 left-1/2 -translate-x-1/2 text-white text-sm bg-black bg-opacity-50 rounded-full px-3 py-1">
  </div>

</div>

<script>
  document.addEventListener("astro:page-load", () => {
    const modal = document.getElementById("image-modal");
    const modalContent = document.getElementById("modal-content");
    const modalImage = document.getElementById("modal-image") as HTMLImageElement; 
    const closeBtn = document.getElementById("modal-close-btn");
    
    const prevBtn = document.getElementById("modal-prev-btn");
    const nextBtn = document.getElementById("modal-next-btn");
    const modalCounter = document.getElementById("modal-counter");

    const galleryImages = Array.from(document.querySelectorAll(".gallery-image"));
    let currentImageIndex = -1;

    if (modal && modalImage && closeBtn && modalContent && prevBtn && nextBtn && modalCounter) {
      const openModal = (index) => {
        if (index < 0 || index >= galleryImages.length) return;
        
        currentImageIndex = index;
        const imageElement = galleryImages[index] as HTMLImageElement; 
        modalImage.src = imageElement.src;
        modalImage.alt = imageElement.dataset.alt || imageElement.alt;
        
        modalCounter.textContent = `${index + 1} / ${galleryImages.length}`;
        
        modal.classList.remove("opacity-0", "pointer-events-none");
        modalContent.classList.remove("scale-95");
        document.body.style.overflow = "hidden";
      };

      const closeModal = () => {
        modal.classList.add("opacity-0", "pointer-events-none");
        modalContent.classList.add("scale-95");
        document.body.style.overflow = "";
        currentImageIndex = -1;
      };

      const navigateModal = (direction) => {
        if (currentImageIndex === -1) return;
        let nextIndex = currentImageIndex + direction;
        if (nextIndex >= galleryImages.length) {
          nextIndex = 0;
        } else if (nextIndex < 0) {
          nextIndex = galleryImages.length - 1;
        }
        openModal(nextIndex);
      };

      galleryImages.forEach((img, index) => {
        img.addEventListener("click", () => openModal(index));
      });

      closeBtn.addEventListener("click", closeModal);
      modal.addEventListener("click", (e) => {
        if (e.target === modal) closeModal();
      });

      prevBtn.addEventListener("click", () => navigateModal(-1));
      nextBtn.addEventListener("click", () => navigateModal(1));

      document.addEventListener("keydown", (e) => {
        if (modal.classList.contains("opacity-0")) return;
        if (e.key === "Escape") closeModal();
        if (e.key === "ArrowRight") navigateModal(1);
        if (e.key === "ArrowLeft") navigateModal(-1);
      });
    }

    const figmaIframe = document.getElementById("figma-iframe") as HTMLIFrameElement; 
    if (figmaIframe) {
      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const iframe = entry.target as HTMLIFrameElement; 
            iframe.src = iframe.dataset.src;
            observer.unobserve(iframe);
          }
        });
      }, { rootMargin: "200px" });
      observer.observe(figmaIframe);
    }

    const figmaContainer = document.getElementById("figma-container");
    const cursorDot = document.getElementById("cursor-dot");
    const cursorOutline = document.getElementById("cursor-outline");
    if (figmaContainer && cursorDot && cursorOutline) {
      figmaContainer.addEventListener('mouseenter', () => {
        cursorDot.style.opacity = '0';
        cursorOutline.style.opacity = '0';
      });
      figmaContainer.addEventListener('mouseleave', () => {
        cursorDot.style.opacity = '1';
        cursorOutline.style.opacity = '1';
      });
    }
  });
</script>
<style>
  .text-clamp-2 {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    overflow: hidden;
  }
</style>
