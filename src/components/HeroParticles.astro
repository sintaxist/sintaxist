<div class="absolute inset-0 overflow-hidden pointer-events-none">
  <canvas id="hero-particles-canvas" class="w-full h-full"></canvas>
</div>

<script>
  // Toda la lógica de tu hook de React vive ahora aquí, en JavaScript puro.
  document.addEventListener("DOMContentLoaded", () => {
    const canvas = document.getElementById('hero-particles-canvas') as HTMLCanvasElement | null;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Variables para mantener el estado de la animación
    let animationFrameId: number | null = null;
    let particles: Particle[] = [];
    const mouse = { x: 0, y: 0 };

    interface Particle {
      x: number; y: number; vx: number; vy: number;
      size: number; opacity: number; color: string; life: number;
    }

    const resizeCanvas = () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
      createParticles(); // Vuelve a crear las partículas al cambiar el tamaño
    };

    const colors = [
      '#6366f1', '#8b5cf6', '#ec4899',
      '#3b82f6', '#10b981', '#f59e0b',
    ];

    const createParticles = () => {
      const numParticles = 30;
      particles = []; // Limpiamos el array
      for (let i = 0; i < numParticles; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 0.3,
          vy: (Math.random() - 0.5) * 0.3,
          // CAMBIO: Partículas más grandes
          size: Math.random() * 4 + 2, // Antes: * 3 + 1
          // CAMBIO: Más opacidad
          opacity: Math.random() * 0.5 + 0.4, // Antes: * 0.7 + 0.3
          color: colors[Math.floor(Math.random() * colors.length)],
          life: Math.random() * Math.PI * 2
        });
      }
    };

    const handleMouseMove = (e: MouseEvent) => {
      const rect = canvas.getBoundingClientRect();
      mouse.x = e.clientX - rect.left;
      mouse.y = e.clientY - rect.top;
    };

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particles.forEach((p) => {
        p.x += p.vx;
        p.y += p.vy;
        
        const dx = mouse.x - p.x;
        const dy = mouse.y - p.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 100) {
          const force = (100 - distance) / 100;
          p.vx += (dx / distance) * force * 0.01;
          p.vy += (dy / distance) * force * 0.01;
        }

        if (p.x < 0 || p.x > canvas.width) p.vx *= -1;
        if (p.y < 0 || p.y > canvas.height) p.vy *= -1;
        
        p.x = Math.max(0, Math.min(canvas.width, p.x));
        p.y = Math.max(0, Math.min(canvas.height, p.y));

        p.life += 0.02;
        const pulseFactor = Math.sin(p.life) * 0.3 + 0.7;

        ctx.save();
        ctx.globalAlpha = p.opacity * pulseFactor;
        
        const gradient = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.size * 2);
        gradient.addColorStop(0, p.color);
        gradient.addColorStop(1, p.color + '00');
        
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.size * pulseFactor, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
      });

      animationFrameId = requestAnimationFrame(animate);
    };

    // Inicialización
    resizeCanvas();
    animate();

    // Listeners
    window.addEventListener('resize', resizeCanvas);
    canvas.addEventListener('mousemove', handleMouseMove);

    // Astro no tiene un ciclo de vida de "desmontaje" como React para scripts simples,
    // pero el navegador limpiará los listeners al cambiar de página.
    // La animación se detendrá automáticamente si la pestaña no está visible.
  });
</script>

<style>
  #hero-particles-canvas {
    filter: blur(0.5px);
  }
</style>