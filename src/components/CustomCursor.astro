<div id="cursor-outline"></div>
<div id="cursor-dot"></div>

<script>
  document.addEventListener("astro:page-load", () => {
    const cursorDot = document.getElementById("cursor-dot");
    const cursorOutline = document.getElementById("cursor-outline");

    if (!cursorDot || !cursorOutline) return;

    let mouseX = 0;
    let mouseY = 0;
    let outlineX = 0;
    let outlineY = 0;

    // Recuperar última posición guardada
    const savedPosition = sessionStorage.getItem("cursorPosition");
    if (savedPosition) {
      const { x, y } = JSON.parse(savedPosition);
      mouseX = x;
      mouseY = y;
      outlineX = x;
      outlineY = y;
      
      // Posicionar inmediatamente
      cursorDot.style.left = `${x}px`;
      cursorDot.style.top = `${y}px`;
      cursorOutline.style.left = `${x}px`;
      cursorOutline.style.top = `${y}px`;
    }

    // Actualizar posición en mousemove
    window.addEventListener("mousemove", (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      
      // Guardar posición en sessionStorage
      sessionStorage.setItem("cursorPosition", JSON.stringify({ x: mouseX, y: mouseY }));
    });

    // Actualizar posición en scroll (sin mover el mouse)
    window.addEventListener("scroll", () => {
      // El mouseX y mouseY se mantienen, no necesitamos actualizarlos
      // El cursor se quedará en la misma posición de viewport
    });

    const animateCursor = () => {
      cursorDot.style.left = `${mouseX}px`;
      cursorDot.style.top = `${mouseY}px`;

      outlineX += (mouseX - outlineX) * 0.17;
      outlineY += (mouseY - outlineY) * 0.17;
      cursorOutline.style.left = `${outlineX}px`;
      cursorOutline.style.top = `${outlineY}px`;

      requestAnimationFrame(animateCursor);
    };

    animateCursor();

    const interactiveElements = document.querySelectorAll(
      "a, button, .interactive"
    );
    interactiveElements.forEach((el) => {
      el.addEventListener("mouseenter", () => {
        cursorDot.classList.add("is-hovered");
        cursorOutline.classList.add("is-hovered");
      });
      el.addEventListener("mouseleave", () => {
        cursorDot.classList.remove("is-hovered");
        cursorOutline.classList.remove("is-hovered");
      });
    });

    const sections = document.querySelectorAll("[data-section-theme]");
    sections.forEach((section) => {
      section.addEventListener("mouseenter", () => {
        const theme = (section as HTMLElement).dataset.sectionTheme;
        cursorDot.classList.toggle("is-inverted", theme === "dark");
        cursorOutline.classList.toggle("is-inverted", theme === "dark");
      });
    });
  });
</script>

<style>
  #cursor-dot {
    position: fixed;
    top: 0;
    left: 0;
    width: 9px;
    height: 9px;
    background-color: var(--color-primary);
    border-radius: 50%;
    pointer-events: none;
    z-index: 9999;
    transform: translate(-50%, -50%);
    transition:
      width 0.3s ease,
      height 0.3s ease,
      background-color 0.3s ease;
  }

  #cursor-dot:after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: calc(100% + 4px);
    height: calc(100% + 4px);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    border: 2px solid var(--color-secondary);
    z-index: -1;
  }

  #cursor-outline {
    position: fixed;
    top: 0;
    left: 0;
    width: 40px;
    height: 40px;
    border: 2px solid var(--color-primary);
    border-radius: 50%;
    pointer-events: none;
    z-index: 9999;
    transform: translate(-50%, -50%);
    transform-origin: center;
    transition:
      width 0.3s cubic-bezier(0.16, 1, 0.1, 2.5),
      height 0.3s cubic-bezier(0.16, 1, 0.1, 2.5),
      border-color ease,
      background-color 0.3s ease;
  }

  #cursor-outline:before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    border: 2px solid var(--color-secondary);
  }

  #cursor-outline.is-hovered {
    width: 70px;
    height: 70px;
    background-color: rgba(244, 146, 34, 0.1);
    border-color: var(--color-cursor-hover);
    animation: breathe 1.2s ease-in-out infinite;
  }

  #cursor-outline.is-hovered + #cursor-dot {
    background-color: var(--color-cursor-hover);
  }

  #cursor-outline.is-hovered + #cursor-dot:after {
    border: 1px var(--color-cursor-hover);
  }

  #cursor-outline.is-hovered:before {
    border: none;
  }

  #cursor-dot.is-inverted {
    background-color: var(--color-secondary);
  }

  #cursor-dot.is-inverted:after {
    border-color: var(--color-primary);
  }

  #cursor-outline.is-inverted {
    border-color: var(--color-secondary);
  }

  #cursor-outline.is-inverted:before {
    border-color: var(--color-primary);
  }
  #cursor-outline.is-inverted.is-hovered {
    border-color: var(--color-cursor-hover);
    background-color: rgba(244, 146, 34, 0.1);
  }

  @keyframes breathe {
    0% {
      transform: translate(-50%, -50%) scale(1);
    }
    50% {
      transform: translate(-50%, -50%) scale(1.15);
    }
    100% {
      transform: translate(-50%, -50%) scale(1);
    }
  }

  @media (max-width: 1000px) {
    #cursor-dot,
    #cursor-outline {
      display: none !important;
    }
    html {
      cursor: auto;
    }
    a,
    button,
    .interactive {
      cursor: pointer;
    }
  }
</style>