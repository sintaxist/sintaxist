---
import Button from "@/components/ui/Button.astro";
import * as Icons from "@/components/ui/Icons.ts";
---

<div id="modal" class="modal-backdrop hidden">
  <div
    class="modal-content"
    role="dialog"
    aria-modal="true"
    aria-labelledby="modal-title"
    aria-label="Detalles del proyecto"
  >
    <!-- Header -->
    <div
      class="flex flex-col-reverse md:flex-row items-end md:items-start justify-between mb-8 gap-4"
    >
      <div class="w-full md:w-auto">
        <h3
          id="modal-title"
          class="  font-bold text-2xl md:text-3xl text-gray-900 mb-2"
        >
        </h3>
        <span
          id="modal-category"
          class="  text-sm px-3 py-1 rounded-full bg-indigo-100 text-indigo-600 border border-indigo-200"
        ></span>
      </div>
      <button
        id="modal-close-btn"
        class="inline-flex items-center gap-x-2 text-gray-600 cursor-pointer hover:bg-indigo-100 hover:text-indigo-600 px-3 py-1.5 rounded-full transition-colors duration-300 flex-shrink-0"
      >
        <span class="container-svg w-8 h-8 flex items-center justify-center"
          ><Fragment set:html={Icons.X} /></span
        >
        <span class="text-sm font-medium">Cerrar</span>
      </button>
    </div>

    <!-- Contenido -->
    <div class="grid lg:grid-cols-2 gap-8">
      <div
        id="modal-image-container"
        class="w-full aspect-[4/3] rounded-2xl overflow-hidden bg-gray-200 relative"
      >
        <div class="skeleton-loader absolute inset-0"></div>
        <img
          id="modal-image"
          class="w-full h-full object-cover rounded-2xl hidden"
          sizes="(max-width: 640px) 100vw, 179px"
        />
      </div>
      <div class="flex flex-col justify-between">
        <div class="space-y-6">
          <p
            id="modal-description"
            class="  font-normal text-gray-700 leading-relaxed"
          >
          </p>
          <div>
            <h4 class="  font-semibold text-lg text-gray-900 mb-4">
              Características Principales
            </h4>
            <ul id="features-container" class="grid grid-cols-2 gap-3"></ul>
          </div>
        </div>
        <div class="space-y-3 mt-6">
          <Button
            href="#"
            id="modal-explore-btn"
            target="_blank"
            size="md"
            variant="primary"
            class="w-full"
            icon={Icons.ExternalLink}
            justify="center"
          >
            <span>Explorar Demo en Vivo</span>
          </Button>
          <Button
            href="#"
            id="modal-whatsapp-btn"
            target="_blank"
            size="md"
            variant="secondary"
            justify="center"
            class="w-full"
          >
            Quiero algo similar 
          </Button>
        </div>
      </div>
    </div>

    <div id="modal-gallery-container" class="mt-10 hidden">
      <h4 class="  font-semibold text-lg text-gray-900 mb-4">
        Más Vistas del Proyecto
      </h4>
      <div id="modal-gallery" class="grid grid-cols-2 md:grid-cols-3 gap-4">
      </div>
    </div>
  </div>
</div>
<script is:inline type="module">
  const modal = document.querySelector("#modal");
  const closeModalBtn = modal.querySelector("#modal-close-btn");
  const modalContent = modal.querySelector(".modal-content");
  const modalImage = modal.querySelector("#modal-image");
  const skeleton = modal.querySelector(".skeleton-loader");

  const closeModal = () => {
    modal.classList.remove("is-visible");
    document.body.style.overflow = "auto";
  };

  window.addEventListener("openModal", (e) => {
    const project = e.detail;

    const galleryContainer = modal.querySelector("#modal-gallery-container");
    const galleryGrid = modal.querySelector("#modal-gallery");

    galleryGrid.innerHTML = "";

    // Seleccionar elementos dentro del listener para asegurar que están disponibles
    modal.querySelector("#modal-title").textContent = project.title;
    modal.querySelector("#modal-category").textContent = project.event_type;
    modal.querySelector("#modal-description").textContent = project.description;
    modal.querySelector("#modal-explore-btn").href = project.link_demo;
    modal.querySelector("#modal-whatsapp-btn").href =
      `https://wa.me/525533256703?text=${encodeURIComponent(`Quisiera más información de: ${project.title} porque quisiera algo parecido`)}`;

    const featuresContainer = modal.querySelector("#features-container");
    featuresContainer.innerHTML = "";
    project.features.forEach((f) => {
      featuresContainer.innerHTML += `<li class="flex items-center space-x-2">
      <div class="w-2 h-2 rounded-full bg-indigo-500 flex-shrink-0"></div>
      <span class="text-gray-600 text-sm  ">${f}</span>
    </li>`;
    });

    // mostrar modal
    modal.classList.add("is-visible");
    document.body.style.overflow = "hidden";

    // mostrar placeholder y cargar imagen
    skeleton.classList.remove("hidden");
    modalImage.classList.add("hidden");
    modalImage.src = project.primary_image;
    modalImage.alt = project.title;

    modalImage.onload = () => {
      skeleton.classList.add("hidden");
      modalImage.classList.remove("hidden");
    };

    if (project.gallery && project.gallery.length > 0) {
      galleryContainer.classList.remove("hidden");

      project.gallery.forEach((imgUrl) => {
        // contenedor para cada imagen con placeholder
        const imgWrapper = document.createElement("div");
        imgWrapper.className =
          "relative w-full h-40 rounded-lg overflow-hidden bg-gray-200";

        // placeholder animado
        const skeleton = document.createElement("div");
        skeleton.className = "skeleton-loader absolute inset-0 min-h-[120px]";
        imgWrapper.appendChild(skeleton);

        // imagen real
        const img = document.createElement("img");
        img.src = imgUrl;
        img.alt = `Detalle de ${project.title}`;
        img.className =
          "w-full h-full object-cover rounded-lg hidden shadow-md";

        // cuando la imagen carga, ocultar placeholder y mostrar imagen
        img.onload = () => {
          skeleton.remove();
          img.classList.remove("hidden");
        };

        imgWrapper.appendChild(img);
        galleryGrid.appendChild(imgWrapper);
      });
    } else {
      galleryContainer.classList.add("hidden");
    }
  });

  // Botón cerrar
  closeModalBtn.addEventListener("click", closeModal);

  // Click fuera del modal
  modal.addEventListener("click", (e) => {
    if (!modalContent.contains(e.target)) {
      closeModal();
    }
  });

  // Tecla ESC
  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && modal.classList.contains("is-visible")) {
      closeModal();
    }
  });
</script>

<style>
  .modal-backdrop {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(12px);
    z-index: 51;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-in-out;
  }
  .modal-backdrop.is-visible {
    opacity: 1;
    pointer-events: auto;
  }
  .modal-content {
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 1.5rem;
    padding: 2rem;
    max-width: 56rem;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
    transform: scale(0.95);
    transition: transform 0.3s ease-in-out;
  }
  .modal-backdrop.is-visible .modal-content {
    transform: scale(1);
  }

  :global(.skeleton-loader) {
    background: linear-gradient(90deg, #e2e8f0 25%, #f1f5f9 50%, #e2e8f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.2s infinite;
  }

  .container-svg :global(svg){
    width: 25px;
    height: 25px;
    color: #4a5565;
  }

  #modal-close-btn:hover .container-svg :global(svg){
    color: #4f46e5;
  }
  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }
</style>
