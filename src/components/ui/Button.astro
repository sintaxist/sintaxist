---
import ArrowIcon from '@/icons/Arrow.astro';

// Definimos las props con valores por defecto
const {
  as = 'a',         // Puede ser 'a' o 'button'
  fill = false,     // true para relleno, false para borde
  color = 'blue',   // 'blue' o 'white'
  arrow = false,    // true o false para mostrar la flecha
  href,
  text,             // El href para la etiqueta 'a'
  ...rest         // El resto de atributos (como 'type' para un bot칩n)
} = Astro.props;

// --- L칩gica para las clases de Tailwind ---

// Clases base para el contenedor del borde
const wrapperBase = "textured-border-wrapper w-full md:w-auto min-w-min group relative inline-flex p-[3px] rounded-full z-0";

// Clases base para el contenido del bot칩n
const contentBase = "font-secondary flex items-center justify-center gap-4 font-semibold px-6 md:px-8 py-3 rounded-full transition-all duration-300 ease-in-out w-full h-full border-2 text-sm xs:text-base sm:text-md md:text-lg";

// Clases condicionales basadas en las props 'fill' y 'color'
const fillStyles = fill
  ? (color === 'blue' ? 'bg-primary text-white border-primary' : 'bg-white text-primary border-secondary')
  : (color === 'blue' ? 'bg-transparent text-primary border-primary' : 'bg-transparent text-white border-secondary');

// Clases condicionales para el hover
const hoverStyles = fill
  ? 'hover:-translate-y-1'
  : 'hover:bg-primary-light hover:-translate-y-1';

// Combinamos todas las clases para el contenido
const contentClasses = `${contentBase} ${fillStyles} ${hoverStyles}`;

// El tag que se renderizar치
const Tag = as;
---

<Tag href={as === 'a' ? href : undefined} class={wrapperBase} {...rest}>
  <div class={contentClasses}>
    {text}{arrow && (
      <ArrowIcon class="transition-transform duration-300 group-hover:translate-x-2" />
    )}
  </div>
</Tag>