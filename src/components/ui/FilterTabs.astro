---
interface Props {
  categories?: object,
}

const { categories } = Astro.props;
const categoryList = Object.entries(categories).filter(([id]) => id !== "all");
---

<div class="flex justify-center flex-wrap gap-2">
  <!-- <button class="filter-btn is-active" data-filter="all"
    >{categories.all}</button
  > -->

  {
    categoryList.map(([id, name]) => (
      <button class="filter-btn" data-filter={id}>
        {name}
      </button>
    ))
  }
</div>

<style>
  .filter-btn {
    border: 1px solid var(--color-primary);
    color: var(--color-primary);
    background-color: transparent;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-family: var(--font-secondary);
    font-weight: 600;
    transition: all 0.3s ease;
  }
  .filter-btn:hover {
    background-color: var(--color-primary-light);
  }
  .filter-btn.is-active {
    background-color: var(--color-primary);
    color: white;
  }
</style>

<script>
  function initFilterLogic() {
    const filterButtons = document.querySelectorAll(".filter-btn");
    const projectItems = document.querySelectorAll(".project-item");
    if (!filterButtons.length || !projectItems.length) return;

    const applyFilterAndAnimate = (filterId) => {
      const projectItems = document.querySelectorAll(".project-item");

      projectItems.forEach((item) => {
        item.classList.remove("is-visible", "is-large-left", "is-large-right");
        item.classList.add("is-hiding");
      });

      setTimeout(() => {
        const visibleItems = [];

        projectItems.forEach((project) => {
          const categoriesAttr = project.getAttribute("data-categories");
          const categoryArray = categoriesAttr ? categoriesAttr.split(",") : [];
          const shouldBeVisible =
            filterId === "all" || categoryArray.includes(filterId);

          if (shouldBeVisible) {
            visibleItems.push(project);
            project.classList.remove("hidden");
          } else {
            project.classList.add("hidden");
          }
        });

        visibleItems.forEach((item, index) => {
          const patternIndex = index % 6;

          if (patternIndex === 0) {
            item.classList.add("is-large-left");
          }
          else if (patternIndex === 3) {
            item.classList.add("is-large-right");
          }

          item.classList.remove("is-hiding");

          setTimeout(() => {
            item.classList.add("is-visible");
          }, index * 80);
        });
      }, 300);
    };

    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const filterId = button.getAttribute("data-filter");
        sessionStorage.setItem("activeProjectFilter", filterId);
        filterButtons.forEach((btn) => btn.classList.remove("is-active"));
        button.classList.add("is-active");
        applyFilterAndAnimate(filterId);
      });
    });

    const savedFilter = sessionStorage.getItem("activeProjectFilter");
    const initialFilter = savedFilter || "all";
    const activeButton = document.querySelector(
      `.filter-btn[data-filter="${initialFilter}"]`
    );

    if (activeButton) {
      filterButtons.forEach((btn) => btn.classList.remove("is-active"));
      activeButton.classList.add("is-active");
    }

    applyFilterAndAnimate(initialFilter);
  }

  document.addEventListener("astro:page-load", initFilterLogic);
</script>
